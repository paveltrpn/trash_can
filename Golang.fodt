<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:creation-date>2019-07-26T15:50:24.410393666</meta:creation-date><dc:date>2019-09-23T21:27:52.310399823</dc:date><meta:editing-duration>PT5H23M18S</meta:editing-duration><meta:editing-cycles>224</meta:editing-cycles><meta:generator>LibreOffice/6.0.7.3$Linux_X86_64 LibreOffice_project/00m0$Build-3</meta:generator><meta:document-statistic meta:character-count="36545" meta:image-count="0" meta:non-whitespace-character-count="31165" meta:object-count="0" meta:page-count="23" meta:paragraph-count="633" meta:table-count="0" meta:word-count="4948"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">159359</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">45678</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">20736</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">18341</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">163818</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">159359</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">45676</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">180093</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">110</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1168865</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">2678325</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="OpenSymbol" svg:font-family="OpenSymbol" style:font-charset="x-symbol"/>
  <style:font-face style:name="Consolas" svg:font-family="Consolas, Monaco, &apos;Andale Mono&apos;, &apos;Ubuntu Mono&apos;, monospace"/>
  <style:font-face style:name="Menlo" svg:font-family="Menlo, Monaco, &apos;Courier New&apos;, monospace"/>
  <style:font-face style:name="Open Sans" svg:font-family="&apos;Open Sans&apos;, sans-serif"/>
  <style:font-face style:name="apple-system" svg:font-family="apple-system, BlinkMacSystemFont, Arial, sans-serif"/>
  <style:font-face style:name="Noto Sans Devanagari1" svg:font-family="&apos;Noto Sans Devanagari&apos;" style:font-family-generic="swiss"/>
  <style:font-face style:name="AR PL SungtiL GB1" svg:font-family="&apos;AR PL SungtiL GB&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="DejaVu Sans Mono1" svg:font-family="&apos;DejaVu Sans Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="DejaVu Sans Mono" svg:font-family="&apos;DejaVu Sans Mono&apos;" style:font-adornments="Book" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Mono1" svg:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-adornments="Обычный" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Serif2" svg:font-family="&apos;Liberation Serif&apos;" style:font-adornments="Bold" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Serif1" svg:font-family="&apos;Liberation Serif&apos;" style:font-adornments="Regular" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="AR PL SungtiL GB" svg:font-family="&apos;AR PL SungtiL GB&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Devanagari" svg:font-family="&apos;Lohit Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC Regular" svg:font-family="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans Devanagari" svg:font-family="&apos;Noto Sans Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.3cm" draw:shadow-offset-y="0.3cm" draw:start-line-spacing-horizontal="0.283cm" draw:start-line-spacing-vertical="0.283cm" draw:end-line-spacing-horizontal="0.283cm" draw:end-line-spacing-vertical="0.283cm" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="ru" fo:country="RU" style:letter-kerning="true" style:font-name-asian="AR PL SungtiL GB" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Noto Sans Devanagari" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:orphans="2" fo:widows="2" fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="1.251cm" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="ru" fo:country="RU" style:letter-kerning="true" style:font-name-asian="AR PL SungtiL GB" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Noto Sans Devanagari" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.423cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="AR PL SungtiL GB" style:font-family-asian="&apos;AR PL SungtiL GB&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Noto Sans Devanagari" style:font-family-complex="&apos;Noto Sans Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties style:font-name="Liberation Serif1" fo:font-family="&apos;Liberation Serif&apos;" style:font-style-name="Regular" style:font-family-generic="roman" style:font-pitch="variable" style:font-size-asian="10.5pt"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Noto Sans Devanagari1" style:font-family-complex="&apos;Noto Sans Devanagari&apos;" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Noto Sans Devanagari1" style:font-family-complex="&apos;Noto Sans Devanagari&apos;" style:font-family-generic-complex="swiss" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Noto Sans Devanagari1" style:font-family-complex="&apos;Noto Sans Devanagari&apos;" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Сode" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties style:font-name="DejaVu Sans Mono" fo:font-family="&apos;DejaVu Sans Mono&apos;" style:font-style-name="Book" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="12pt" fo:font-weight="normal" officeooo:rsid="00138824" style:font-size-asian="10.5pt" style:font-weight-asian="normal" style:font-size-complex="12pt" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="Code" style:family="paragraph" style:parent-style-name="Text_20_body" style:master-page-name="">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" style:page-number="auto">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-style-name="Обычный" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-size-asian="12pt" style:font-size-complex="12pt"/>
  </style:style>
  <style:style style:name="Section" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="14pt" fo:font-weight="bold" style:font-size-asian="10.5pt"/>
  </style:style>
  <style:style style:name="Subsection" style:family="paragraph" style:parent-style-name="Section">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-align="justify" style:justify-single-word="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:font-name="Liberation Serif2" fo:font-family="&apos;Liberation Serif&apos;" style:font-style-name="Bold" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="12pt" fo:font-style="italic" fo:font-weight="bold" style:font-size-asian="10.5pt"/>
  </style:style>
  <style:style style:name="Title" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:class="chapter">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="28pt" fo:font-weight="bold" style:font-size-asian="28pt" style:font-weight-asian="bold" style:font-size-complex="28pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="3" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.247cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="14pt" fo:font-weight="bold" style:font-name-asian="AR PL SungtiL GB" style:font-family-asian="&apos;AR PL SungtiL GB&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-weight-asian="bold" style:font-name-complex="Noto Sans Devanagari" style:font-family-complex="&apos;Noto Sans Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Mono1" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-name-asian="AR PL SungtiL GB1" style:font-family-asian="&apos;AR PL SungtiL GB&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-size-asian="10pt" style:font-name-complex="Liberation Mono1" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="Footer" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="8.5cm" style:type="center"/>
     <style:tab-stop style:position="17cm" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="2" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.353cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="18pt" fo:font-weight="bold" style:font-name-asian="Noto Sans CJK SC Regular" style:font-family-asian="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="18pt" style:font-weight-asian="bold" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="18pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="List_20_Heading" style:display-name="List Heading" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:next-style-name="List_20_Contents" style:class="html">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="List_20_Contents" style:display-name="List Contents" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-left="1cm" fo:margin-right="0cm" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Quotations" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-left="1cm" fo:margin-right="1cm" fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Header" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="8.751cm" style:type="center"/>
     <style:tab-stop style:position="17.501cm" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Header_20_left" style:display-name="Header left" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="8.751cm" style:type="center"/>
     <style:tab-stop style:position="17.501cm" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Header_20_right" style:display-name="Header right" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties text:number-lines="false" text:line-number="0">
    <style:tab-stops>
     <style:tab-stop style:position="8.751cm" style:type="center"/>
     <style:tab-stop style:position="17.501cm" style:type="right"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Horizontal_20_Line" style:display-name="Horizontal Line" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="html">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false" style:border-line-width-bottom="0cm 0.004cm 0.002cm" fo:padding="0cm" fo:border-left="none" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.14pt double #808080" text:number-lines="false" text:line-number="0" style:join-border="false"/>
   <style:text-properties fo:font-size="6pt" style:font-size-asian="6pt" style:font-size-complex="6pt"/>
  </style:style>
  <style:style style:name="Salutation" style:family="paragraph" style:hidden="true" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
  </style:style>
  <style:style style:name="Heading_20_4" style:display-name="Heading 4" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="4" style:list-style-name="" style:class="text">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="12pt" fo:font-weight="bold" style:font-name-asian="Noto Sans CJK SC Regular" style:font-family-asian="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="12pt" style:font-weight-asian="bold" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="12pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Source_20_Text" style:display-name="Source Text" style:family="text">
   <style:text-properties style:font-name="Liberation Mono1" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" style:font-name-asian="AR PL SungtiL GB1" style:font-family-asian="&apos;AR PL SungtiL GB&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-name-complex="Liberation Mono1" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed"/>
  </style:style>
  <style:style style:name="Emphasis" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <style:style style:name="Strong_20_Emphasis" style:display-name="Strong Emphasis" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="OpenSymbol" fo:font-family="OpenSymbol" style:font-charset="x-symbol" style:font-name-asian="OpenSymbol" style:font-family-asian="OpenSymbol" style:font-charset-asian="x-symbol" style:font-name-complex="OpenSymbol" style:font-family-complex="OpenSymbol" style:font-charset-complex="x-symbol"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.499cm" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Footer">
   <style:text-properties fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Footer">
   <style:text-properties fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-size="14pt" fo:font-weight="bold" officeooo:rsid="0011d5e1" style:font-size-asian="12.25pt" style:font-weight-asian="bold" style:font-size-complex="14pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:rsid="001dce66" officeooo:paragraph-rsid="001dce66"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00138824" officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="0014c989"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:line-height="115%"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:text-align="justify" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="0016c7c6"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#4078f2" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties fo:font-style="normal" style:font-style-asian="normal" style:font-style-complex="normal"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties style:font-name="DejaVu Sans Mono1"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="001dce66"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="10pt" officeooo:rsid="001dce66" officeooo:paragraph-rsid="001dce66" style:font-size-asian="8.75pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P18" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties style:font-name="Liberation Serif" officeooo:paragraph-rsid="001dce66"/>
  </style:style>
  <style:style style:name="P19" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="001e8590" officeooo:paragraph-rsid="001e8590"/>
  </style:style>
  <style:style style:name="P20" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="001eb547"/>
  </style:style>
  <style:style style:name="P21" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="001f8321"/>
  </style:style>
  <style:style style:name="P22" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="0020fe57"/>
  </style:style>
  <style:style style:name="P23" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties officeooo:paragraph-rsid="0023bf20"/>
  </style:style>
  <style:style style:name="P24" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="0023bf20"/>
  </style:style>
  <style:style style:name="P25" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00242aba"/>
  </style:style>
  <style:style style:name="P26" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:line-height="100%"/>
  </style:style>
  <style:style style:name="P27" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:line-height="115%"/>
  </style:style>
  <style:style style:name="P28" style:family="paragraph" style:parent-style-name="Code">
   <style:text-properties style:font-name="DejaVu Sans Mono1"/>
  </style:style>
  <style:style style:name="P29" style:family="paragraph" style:parent-style-name="Code">
   <style:text-properties officeooo:paragraph-rsid="001b70b4"/>
  </style:style>
  <style:style style:name="P30" style:family="paragraph" style:parent-style-name="Code">
   <style:text-properties officeooo:paragraph-rsid="001dce66"/>
  </style:style>
  <style:style style:name="P31" style:family="paragraph" style:parent-style-name="Code">
   <style:text-properties fo:color="#000000"/>
  </style:style>
  <style:style style:name="P32" style:family="paragraph" style:parent-style-name="Code">
   <style:text-properties officeooo:paragraph-rsid="001f8321"/>
  </style:style>
  <style:style style:name="P33" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties fo:font-weight="bold" officeooo:paragraph-rsid="00138824" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P34" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:rsid="00138824" officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P35" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:paragraph-rsid="00150416"/>
  </style:style>
  <style:style style:name="P36" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:paragraph-rsid="0016c7c6"/>
  </style:style>
  <style:style style:name="P37" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:rsid="0016c7c6" officeooo:paragraph-rsid="0016c7c6"/>
  </style:style>
  <style:style style:name="P38" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:rsid="00199079" officeooo:paragraph-rsid="00199079"/>
  </style:style>
  <style:style style:name="P39" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:rsid="001b70b4" officeooo:paragraph-rsid="001b70b4"/>
  </style:style>
  <style:style style:name="P40" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:rsid="001c9f97" officeooo:paragraph-rsid="001c9f97"/>
  </style:style>
  <style:style style:name="P41" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:paragraph-rsid="001c9f97"/>
  </style:style>
  <style:style style:name="P42" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:rsid="001dce66" officeooo:paragraph-rsid="001dce66"/>
  </style:style>
  <style:style style:name="P43" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:rsid="001e8590" officeooo:paragraph-rsid="001e8590"/>
  </style:style>
  <style:style style:name="P44" style:family="paragraph" style:parent-style-name="Subsection">
   <style:text-properties officeooo:paragraph-rsid="00242aba"/>
  </style:style>
  <style:style style:name="P45" style:family="paragraph" style:parent-style-name="Section">
   <style:text-properties officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P46" style:family="paragraph" style:parent-style-name="Section">
   <style:text-properties fo:font-size="14pt" officeooo:paragraph-rsid="00138824" style:font-size-asian="14pt" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="P47" style:family="paragraph" style:parent-style-name="Section">
   <style:text-properties officeooo:rsid="00199079" officeooo:paragraph-rsid="00199079"/>
  </style:style>
  <style:style style:name="P48" style:family="paragraph" style:parent-style-name="Section">
   <style:text-properties officeooo:rsid="001dce66" officeooo:paragraph-rsid="001dce66"/>
  </style:style>
  <style:style style:name="P49" style:family="paragraph" style:parent-style-name="Section">
   <style:text-properties officeooo:paragraph-rsid="0020fe57"/>
  </style:style>
  <style:style style:name="P50" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
  </style:style>
  <style:style style:name="P51" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="start" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P52" style:family="paragraph" style:parent-style-name="Subsection">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
   <style:text-properties fo:font-weight="bold" officeooo:paragraph-rsid="00138824" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P53" style:family="paragraph" style:parent-style-name="Subsection">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
   <style:text-properties officeooo:rsid="00138824" officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P54" style:family="paragraph" style:parent-style-name="Subsection">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
  </style:style>
  <style:style style:name="P55" style:family="paragraph" style:parent-style-name="Subsection">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
   <style:text-properties officeooo:paragraph-rsid="0016c7c6"/>
  </style:style>
  <style:style style:name="P56" style:family="paragraph" style:parent-style-name="Subsection">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
   <style:text-properties officeooo:rsid="0014c989" officeooo:paragraph-rsid="0014c989"/>
  </style:style>
  <style:style style:name="P57" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P58" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
  </style:style>
  <style:style style:name="P59" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="justify" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P60" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P61" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
   <style:text-properties officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P62" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
   <style:text-properties officeooo:rsid="00138824" officeooo:paragraph-rsid="00138824"/>
  </style:style>
  <style:style style:name="P63" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%"/>
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="P64" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties fo:font-style="italic" officeooo:paragraph-rsid="00138824" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="P65" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false"/>
   <style:text-properties officeooo:paragraph-rsid="0014c989"/>
  </style:style>
  <style:style style:name="P66" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="14pt" fo:font-weight="bold" style:font-size-asian="14pt" style:font-weight-asian="bold" style:font-size-complex="14pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P67" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-align="justify" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P68" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties officeooo:paragraph-rsid="0016c7c6"/>
  </style:style>
  <style:style style:name="P69" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties officeooo:paragraph-rsid="0014c989"/>
  </style:style>
  <style:style style:name="P70" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="justify" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="9pt" officeooo:rsid="0016c7c6" officeooo:paragraph-rsid="0016c7c6" style:font-size-asian="7.84999990463257pt" style:font-size-complex="9pt"/>
  </style:style>
  <style:style style:name="P71" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="center" style:justify-single-word="false"/>
   <style:text-properties fo:font-size="9pt" officeooo:rsid="0016c7c6" officeooo:paragraph-rsid="0016c7c6" style:font-size-asian="7.84999990463257pt" style:font-size-complex="9pt"/>
  </style:style>
  <style:style style:name="P72" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P73" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-align="justify" style:justify-single-word="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P74" style:family="paragraph" style:parent-style-name="Subsection">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P75" style:family="paragraph" style:parent-style-name="Code">
   <style:paragraph-properties fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" fo:margin-bottom="0cm" loext:contextual-spacing="false" fo:line-height="115%" fo:text-indent="0cm" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P76" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P77" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="P78" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L1"/>
  <style:style style:name="P79" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L2"/>
  <style:style style:name="P80" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L1">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.499cm" loext:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties officeooo:rsid="00138824"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:font-style="italic"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:font-style="italic" officeooo:rsid="00138824" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:font-style="italic" officeooo:rsid="0014c989" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:font-style="italic" officeooo:rsid="001b70b4" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:font-style="italic" fo:font-weight="normal" style:font-style-asian="italic" style:font-weight-asian="normal" style:font-style-complex="italic" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:font-weight="normal" style:font-weight-asian="normal" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#222222" style:font-name="apple-system" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#222222" style:font-name="apple-system" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#222222" style:font-name="apple-system" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#222222" fo:letter-spacing="normal"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#222222" fo:letter-spacing="normal" fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T15" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#222222" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T16" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#222222" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T17" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#992298" style:text-line-through-style="none" style:text-line-through-type="none" style:font-name="apple-system" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" style:text-underline-style="none" fo:font-weight="normal" style:text-blinking="false" fo:background-color="#ffffff" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T18" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#992298" style:text-line-through-style="none" style:text-line-through-type="none" style:font-name="apple-system" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" style:text-underline-style="none" fo:font-weight="normal" style:text-blinking="false" fo:background-color="#ffffff" loext:char-shading-value="0" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T19" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#a626a4" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T20" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#a626a4" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#fbfdff" loext:char-shading-value="0" loext:padding-left="0.529cm" loext:padding-right="0.529cm" loext:padding-top="0.45cm" loext:padding-bottom="0.529cm" loext:border="0.06pt solid #e5e8ec"/>
  </style:style>
  <style:style style:name="T21" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#383a42" fo:letter-spacing="normal"/>
  </style:style>
  <style:style style:name="T22" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#383a42" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T23" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#383a42" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#fbfdff" loext:char-shading-value="0" loext:padding-left="0.529cm" loext:padding-right="0.529cm" loext:padding-top="0.45cm" loext:padding-bottom="0.529cm" loext:border="0.06pt solid #e5e8ec"/>
  </style:style>
  <style:style style:name="T24" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#383a42" style:font-name="Liberation Serif" fo:letter-spacing="normal"/>
  </style:style>
  <style:style style:name="T25" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#50a14f" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T26" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#50a14f" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#fbfdff" loext:char-shading-value="0" loext:padding-left="0.529cm" loext:padding-right="0.529cm" loext:padding-top="0.45cm" loext:padding-bottom="0.529cm" loext:border="0.06pt solid #e5e8ec"/>
  </style:style>
  <style:style style:name="T27" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#4078f2" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T28" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#4078f2" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#fbfdff" loext:char-shading-value="0" loext:padding-left="0.529cm" loext:padding-right="0.529cm" loext:padding-top="0.45cm" loext:padding-bottom="0.529cm" loext:border="0.06pt solid #e5e8ec"/>
  </style:style>
  <style:style style:name="T29" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#4078f2" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T30" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#c18401" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T31" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#333333" style:font-name="apple-system" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T32" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#0077aa" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T33" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#0077aa" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T34" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#444444" style:font-name="Open Sans" fo:font-size="14.25pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T35" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#444444" style:font-name="Open Sans" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#eeeeee" loext:char-shading-value="0" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T36" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#444444" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" fo:background-color="#eeeeee" loext:char-shading-value="0" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T37" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#444444" fo:letter-spacing="normal"/>
  </style:style>
  <style:style style:name="T38" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" fo:letter-spacing="normal"/>
  </style:style>
  <style:style style:name="T39" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T40" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T41" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T42" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T43" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#dd4a68" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T44" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#880000" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T45" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#999999" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T46" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#a67f59" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T47" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#669900" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T48" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#990055" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T49" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#008800" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T50" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#708090" style:font-name="Consolas" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal" loext:padding="0cm" loext:border="none"/>
  </style:style>
  <style:style style:name="T51" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#986801" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T52" style:family="text">
   <style:text-properties officeooo:rsid="0014c989"/>
  </style:style>
  <style:style style:name="T53" style:family="text">
   <style:text-properties fo:color="#a626a4" style:font-name="Menlo" fo:font-size="10.5pt"/>
  </style:style>
  <style:style style:name="T54" style:family="text">
   <style:text-properties fo:color="#383a42"/>
  </style:style>
  <style:style style:name="T55" style:family="text">
   <style:text-properties fo:color="#383a42" style:font-name="Menlo" fo:font-size="10.5pt"/>
  </style:style>
  <style:style style:name="T56" style:family="text">
   <style:text-properties fo:color="#4078f2" style:font-name="Menlo" fo:font-size="10.5pt"/>
  </style:style>
  <style:style style:name="T57" style:family="text">
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="T58" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T59" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-style="italic" officeooo:rsid="00161096" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T60" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-style="italic" officeooo:rsid="001dce66" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T61" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-style="italic" officeooo:rsid="00242aba" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T62" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-style="italic" fo:font-weight="normal" style:font-style-asian="italic" style:font-weight-asian="normal" style:font-style-complex="italic" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="T63" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" officeooo:rsid="00161096"/>
  </style:style>
  <style:style style:name="T64" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" officeooo:rsid="0016c7c6"/>
  </style:style>
  <style:style style:name="T65" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-style="normal" style:font-style-asian="normal" style:font-style-complex="normal"/>
  </style:style>
  <style:style style:name="T66" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-style="normal" officeooo:rsid="00242aba" style:font-style-asian="normal" style:font-style-complex="normal"/>
  </style:style>
  <style:style style:name="T67" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" officeooo:rsid="001dce66"/>
  </style:style>
  <style:style style:name="T68" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" officeooo:rsid="0020fe57"/>
  </style:style>
  <style:style style:name="T69" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T70" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="normal" style:font-weight-asian="normal" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="T71" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" officeooo:rsid="0023bf20"/>
  </style:style>
  <style:style style:name="T72" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" fo:font-size="9pt" officeooo:rsid="0023bf20" style:font-size-asian="9pt" style:font-size-complex="9pt"/>
  </style:style>
  <style:style style:name="T73" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" officeooo:rsid="00242aba"/>
  </style:style>
  <style:style style:name="T74" style:family="text">
   <style:text-properties style:font-name="Liberation Serif" officeooo:rsid="00275d22"/>
  </style:style>
  <style:style style:name="T75" style:family="text">
   <style:text-properties style:font-name="DejaVu Sans Mono1"/>
  </style:style>
  <style:style style:name="T76" style:family="text">
   <style:text-properties style:font-name="DejaVu Sans Mono1" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T77" style:family="text">
   <style:text-properties style:font-name="DejaVu Sans Mono1" officeooo:rsid="001eb547"/>
  </style:style>
  <style:style style:name="T78" style:family="text">
   <style:text-properties officeooo:rsid="00150416"/>
  </style:style>
  <style:style style:name="T79" style:family="text">
   <style:text-properties officeooo:rsid="00161096"/>
  </style:style>
  <style:style style:name="T80" style:family="text">
   <style:text-properties fo:color="#a0a1a7" style:font-name="Menlo" fo:font-size="10.5pt" fo:letter-spacing="normal" fo:font-style="italic" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T81" style:family="text">
   <style:text-properties fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T82" style:family="text">
   <style:text-properties officeooo:rsid="0016c7c6"/>
  </style:style>
  <style:style style:name="T83" style:family="text">
   <style:text-properties style:font-name="Liberation Sans" fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T84" style:family="text">
   <style:text-properties fo:font-style="normal" style:font-style-asian="normal" style:font-style-complex="normal"/>
  </style:style>
  <style:style style:name="T85" style:family="text">
   <style:text-properties fo:font-style="normal" officeooo:rsid="00242aba" style:font-style-asian="normal" style:font-style-complex="normal"/>
  </style:style>
  <style:style style:name="T86" style:family="text">
   <style:text-properties officeooo:rsid="001b70b4"/>
  </style:style>
  <style:style style:name="T87" style:family="text">
   <style:text-properties officeooo:rsid="001c9f97"/>
  </style:style>
  <style:style style:name="T88" style:family="text">
   <style:text-properties officeooo:rsid="001dce66"/>
  </style:style>
  <style:style style:name="T89" style:family="text">
   <style:text-properties fo:color="#222222" style:font-name="apple-system" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-style="italic" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T90" style:family="text">
   <style:text-properties fo:color="#222222" style:font-name="apple-system" fo:font-size="12pt" fo:letter-spacing="normal" fo:font-weight="normal"/>
  </style:style>
  <style:style style:name="T91" style:family="text">
   <style:text-properties style:text-underline-style="solid" style:text-underline-type="double" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="T92" style:family="text">
   <style:text-properties style:text-underline-style="none"/>
  </style:style>
  <style:style style:name="T93" style:family="text">
   <style:text-properties officeooo:rsid="001eb547"/>
  </style:style>
  <style:style style:name="T94" style:family="text">
   <style:text-properties officeooo:rsid="001f8321"/>
  </style:style>
  <style:style style:name="T95" style:family="text">
   <style:text-properties officeooo:rsid="0020fe57"/>
  </style:style>
  <style:style style:name="T96" style:family="text">
   <style:text-properties officeooo:rsid="0023bf20"/>
  </style:style>
  <style:style style:name="T97" style:family="text">
   <style:text-properties style:font-name="Liberation Mono1"/>
  </style:style>
  <style:style style:name="T98" style:family="text">
   <style:text-properties officeooo:rsid="00242aba"/>
  </style:style>
  <text:list-style style:name="L1">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L2">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="0.748cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="1.995cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="3.242cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="4.489cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="5.736cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="6.983cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="8.23cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="9.478cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="10.725cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" style:num-suffix="." text:bullet-char="•">
    <style:list-level-properties text:space-before="11.972cm" text:min-label-width="0.499cm"/>
   </text:list-level-style-bullet>
  </text:list-style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="21.001cm" fo:page-height="29.7cm" style:num-format="1" style:print-orientation="portrait" fo:margin-top="1.499cm" fo:margin-bottom="1.499cm" fo:margin-left="2cm" fo:margin-right="1.499cm" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.706cm" style:layout-grid-ruby-height="0.353cm" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0cm">
    <style:footnote-sep style:width="0.018cm" style:distance-before-sep="0.101cm" style:distance-after-sep="0.101cm" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style>
    <style:header-footer-properties fo:min-height="0cm" fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0.499cm"/>
   </style:footer-style>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1">
   <style:footer>
    <text:p text:style-name="P1"><text:page-number text:select-page="current">11</text:page-number></text:p>
   </style:footer>
  </style:master-page>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <office:forms form:automatic-focus="false" form:apply-design-mode="false"/>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:p text:style-name="P46">GOLANG</text:p>
   <text:p text:style-name="P66"><text:span text:style-name="T1">Ш</text:span>паргалк<text:span text:style-name="T1">а</text:span> библиотек — аналогов контейнеров STL.</text:p>
   <text:p text:style-name="P71">(на 30 июля 2019г.)</text:p>
   <text:p text:style-name="P70"/>
   <text:p text:style-name="P52">Динамический непрерывный массив</text:p>
   <text:p text:style-name="P59">Аналог<text:span text:style-name="T3"> std::vector. </text:span>Поддерживает обращение к элементу по индексу за константное время в несколько тактов процессора. Можно увеличить или уменьшить вместительность. Это встроеный <text:span text:style-name="T3">slice:</text:span></text:p>
   <text:p text:style-name="P64"/>
   <text:p text:style-name="P50"><text:tab/><text:span text:style-name="T1">vector := []int{}</text:span></text:p>
   <text:p text:style-name="P50"/>
   <text:p text:style-name="P54">Стек</text:p>
   <text:p text:style-name="P60"><text:span text:style-name="T1">Аналог </text:span><text:span text:style-name="T4">std::stack. </text:span>Упорядоченный набор, в которой добавление новых элементов и удаление существующих производится с одного конца. Первым из стека удаляется элемент, который был помещен туда последним <text:span text:style-name="T3">(last-in, first-out — LIFO)</text:span>. Это опять встоенный <text:span text:style-name="T3">slice</text:span>. Из проекта в проект копируются сниппеты:</text:p>
   <text:p text:style-name="P59"/>
   <text:p text:style-name="P50"><text:span text:style-name="T3"><text:tab/>//</text:span><text:span text:style-name="T4">Push</text:span></text:p>
   <text:p text:style-name="P50"><text:tab/>stack = <text:span text:style-name="T9">append</text:span>(key, value)</text:p>
   <text:p text:style-name="P50"/>
   <text:p text:style-name="P53">Очередь</text:p>
   <text:p text:style-name="P60"><text:span text:style-name="T1">Аналог </text:span><text:span text:style-name="T4">std::deque</text:span><text:span text:style-name="T1"> и </text:span><text:span text:style-name="T4">std::queue. </text:span>Очереди реализуют операции извлечения и добавления для начала и конца за константное время. Первым из очереди удаляется элемент, который был первым помещен <text:span text:style-name="T3">(first-in, first-out — FIFO)</text:span>. Буферизованный канал является очередью на кольцевом буфере, можно использовать его, когда читатель и писатель — разные горутины. Но отдельной реализации очереди в стандартной библиотеке нет. Список <text:span text:style-name="T3">awesome-go</text:span> советует библиотеку <text:span text:style-name="T3">https://github.com/gammazero/dequ</text:span>e.</text:p>
   <text:p text:style-name="P59"/>
   <text:p text:style-name="P50"><text:span text:style-name="T19"><text:tab/></text:span>import &quot;github.com/gammazero/deque&quot;</text:p>
   <text:p text:style-name="P50"/>
   <text:p text:style-name="P62">Реализуемые операции:</text:p>
   <text:p text:style-name="P62"/>
   <text:p text:style-name="P51"><text:tab/>func (q *Deque) PushBack(elem interface{}) </text:p>
   <text:p text:style-name="P51"><text:tab/>func (q *Deque) PushFront(elem interface{}) </text:p>
   <text:p text:style-name="P51"><text:tab/>func (q *Deque) PopBack() interface{} </text:p>
   <text:p text:style-name="P51"><text:tab/>func (q *Deque) PopFront() interface{} </text:p>
   <text:p text:style-name="P51"><text:tab/>func (q *Deque) Back() interface{} </text:p>
   <text:p text:style-name="P51"><text:tab/>func (q *Deque) Front() interface{} </text:p>
   <text:p text:style-name="P51"><text:tab/>func (q *Deque) At(i int) interface{}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P56">Двусвязный список</text:p>
   <text:p text:style-name="P69">Аналог <text:span text:style-name="T5">std::list.</text:span><text:span text:style-name="T52"> </text:span>Состоит из элементов, содержащих помимо собственных данных ссылки на следующий и предыдущий элемент списка. Он есть в стандартной библиотеке:</text:p>
   <text:p text:style-name="P65"/>
   <text:p text:style-name="Code"><text:tab/>import &quot;container/list&quot;</text:p>
   <text:p text:style-name="P65"/>
   <text:p text:style-name="P69">Как и ожидается, поддерживает операции вставки (в начало, в конец, до и после элемента, указатель на который передан) и удаления.</text:p>
   <text:p text:style-name="P57"/>
   <text:p text:style-name="P50"><text:soft-page-break/><text:tab/>func (l *List) PushBack(v interface{}) *Element </text:p>
   <text:p text:style-name="P50"><text:tab/>func (l *List) PushFront(v interface{}) *Element </text:p>
   <text:p text:style-name="P50"><text:tab/>func (l *List) InsertAfter(v interface{}, mark *Element) *Element </text:p>
   <text:p text:style-name="P50"><text:tab/>func (l *List) InsertBefore(v interface{}, mark *Element) *Element </text:p>
   <text:p text:style-name="P50"><text:tab/>func (l *List) Remove(e *Element) interface{}</text:p>
   <text:p text:style-name="P57"/>
   <text:p text:style-name="P67">Gо не предоставляет специфического синтаксиса для итераторов. Потому следующий/предыдущий элемент можно получить из указателя на любой узел. Эти методы не протухают после добавления/удаления элемента в список, без неожиданностей.</text:p>
   <text:p text:style-name="P57"/>
   <text:p text:style-name="P27"><text:tab/>func (e *Element) Next() *Element </text:p>
   <text:p text:style-name="P27"><text:tab/>func (e *Element) Prev() *Element</text:p>
   <text:p text:style-name="P57"/>
   <text:p text:style-name="Subsection">Очередь с приоритетом</text:p>
   <text:p text:style-name="P68">Аналог <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">std::priority_queu</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T59">e</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">. </text:span></text:span>Позволяет складывать элементы в любом порядке, а доставать в любой момент времени самый приоритетный из оставшихся. Применяется, например, в алгоритме построения минимального покрывающего дерева, когда на очередном шаге алгоритм выбирает самое короткое ребро из всех, одним концом начинающихся в уже покрытых вершинах.</text:p>
   <text:p text:style-name="P68"><text:line-break/>В стандартной библиотеке есть адаптер, превращающий любой сортируемый контейнер (реализующий <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">sort.Interface</text:span></text:span>) в очередь с приоритетом.</text:p>
   <text:p text:style-name="P57"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75">import &quot;container/heap&quot;</text:span></text:span></text:p>
   <text:p text:style-name="P57"><text:line-break/>Это классическая Двоичная куча. Реализует вставку и удаление за <text:span text:style-name="T3">O(log n).</text:span></text:p>
   <text:p text:style-name="P28"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>func Pop(h Interface) interface{}</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>func Push(h Interface, x interface{})</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75">func Remove(h Interface, i int) interface{}</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="P74"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Хэш таблица</text:span></text:span></text:p>
   <text:p text:style-name="P73"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Она же словарь и ассоциативный массив. Aналог </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">std::unordered_map</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">. Позволяет добавлять ключ-значение, удалять значение по ключу и проверять наличие элемента за </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">O(1) </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">в среднем. Очевидно, map встроена в язык:</text:span></text:span></text:p>
   <text:p text:style-name="P72"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="P75"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:tab/></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75">unorderedMap := make(map[string]int)</text:span></text:span></text:p>
   <text:p text:style-name="P75"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="P72"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Результат make(map) является указателем, и способ работы немного отличается от стандартных контейнеров:</text:span></text:span></text:p>
   <text:p text:style-name="P72"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75">// Проверка вхождения: </text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>_, ok := unorderedMap[&quot;route&quot;] </text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>// Удаление элемента: </text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>delete(unorderedMap, &quot;route&quot;) // Нахождение длины: n := len(unorderedMap)</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="P57"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">«runtime/map»</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, в отличии от </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">std::unordered_map </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">заботится о программисте — удалять значения во время итерации по ним безопасно.</text:span></text:span></text:p>
   <text:p text:style-name="P55"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T64">Множества</text:span></text:span></text:p>
   <text:p text:style-name="P59"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Аналог </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">std::unordered_set</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">. Почти то же самое, что и хеш-таблица, но без сохранения значения. Если нам нужно только быстрая проверка вхождения, то можно снова использовать встроенный map. Нужно лишь указать пустое значение, что бы указать, что важен только ключ.</text:span></text:span></text:p>
   <text:p text:style-name="P58"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="Code"><text:tab/>var m = make(map[string]struct{}) </text:p>
   <text:p text:style-name="Code"><text:tab/>m[&quot;!&quot;] = struct{}{} </text:p>
   <text:p text:style-name="Code"><text:tab/>, ok := m[&quot;!&quot;] // true</text:p>
   <text:p text:style-name="P58"/>
   <text:p text:style-name="P59">Но эта реализация не поддерживает сложных операторов. Для объединения, пересечения, разности из коробки, понадобятся сторонние библиотеки. Самая используемая, судя по количеству звёзд: <text:span text:style-name="T3">https://github.com/deckarep/golang-set</text:span></text:p>
   <text:p text:style-name="P63"/>
   <text:p text:style-name="Code"><text:tab/>import &quot;github.com/deckarep/golang-set&quot;</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Самая нужная часть <text:span text:style-name="T3">API:</text:span></text:p>
   <text:p text:style-name="P11"/>
   <text:p text:style-name="Code"><text:tab/>Add(i interface{}) bool </text:p>
   <text:p text:style-name="Code"><text:tab/>Remove(i interface{}) </text:p>
   <text:p text:style-name="Code"><text:tab/>Cardinality() int // len() </text:p>
   <text:p text:style-name="Code"><text:tab/>Contains(i ...interface{}) bool </text:p>
   <text:p text:style-name="Code"><text:tab/>IsSubset(other Set) bool </text:p>
   <text:p text:style-name="Code"><text:tab/>Intersect(other Set) Set </text:p>
   <text:p text:style-name="Code"><text:tab/>Union(other Set) Set </text:p>
   <text:p text:style-name="Code"><text:tab/>Difference(other Set) Set </text:p>
   <text:p text:style-name="Code"><text:tab/>SymmetricDifference(other Set) Set</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P37">Множество <text:span text:style-name="T3">Int</text:span></text:p>
   <text:p text:style-name="P9">В экспериментальной части стандарной библиотеки есть оптимизированное множесво <text:span text:style-name="T3">int,</text:span> экономящее каждый бит.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:tab/>import &quot;golang.org/x/tools/container/intsets&quot;</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P9">Оно также поддерживает объединение, пересечение, разность множеств.</text:p>
   <text:p text:style-name="P9"/>
   <text:p text:style-name="P37">Двоичные деревья поиска</text:p>
   <text:p text:style-name="P10">Aналоги <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">std::set</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>и <text:span text:style-name="Source_20_Text"><text:span text:style-name="T83">std::map</text:span></text:span>. Могут показаться новичку плохими аналогами хеш-таблиц: также поддерживают добавление, удаление и проверку вхождения, но за <text:span text:style-name="T3">O(log n)</text:span>. Но деревья хранят узлы отсортированными по ключу.</text:p>
   <text:p text:style-name="P10"><text:line-break/>В стандартной библиотеке go деревьев нет, широко используется репозиторий, содержащий AVL, Красно-Чёрные и B-деревья.</text:p>
   <text:p text:style-name="P10"/>
   <text:p text:style-name="Code"><text:tab/>import &quot;github.com/emirpasic/gods/trees/avltree&quot;</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P11">Наиболее употребимые методы API:</text:p>
   <text:p text:style-name="P11"/>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Get(key interface{}) (value interface{}, found bool) </text:p>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Put(key interface{}, value interface{}) </text:p>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Remove(key interface{}) </text:p>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Size() int </text:p>
   <text:p text:style-name="Code"><text:soft-page-break/><text:tab/>func (tree *Tree) Keys() []interface{} </text:p>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Values() []interface{} </text:p>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Left() *Node </text:p>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Right() *Node</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Есть два особо важных метода деревев:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Ceiling(key interface{}) (ceiling *Node, found bool)</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">возвращает наименьший существующий элемент больще ключа.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:tab/>func (tree *Tree) Floor(key interface{}) (floor *Node, found bool)</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P10">возвращает наибольший существующий элемент меньше ключа.</text:p>
   <text:p text:style-name="P10"><text:line-break/>Задачи на это относительно часто попадаются в собеседованиях. В реальной жизни используется в индексах баз данных:</text:p>
   <text:p text:style-name="P10"/>
   <text:p text:style-name="Code"><text:tab/>select x from table where x &lt;= $1 limit 1;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">При наличии индекса отработает за <text:span text:style-name="T3">O(log n)</text:span>, за 1 поиск границы в <text:span text:style-name="T3">B-дереве.</text:span></text:p>
   <text:p text:style-name="P12"/>
   <text:p text:style-name="P37">Фильтр Блума</text:p>
   <text:p text:style-name="P10">А вот этой структуры данных в <text:span text:style-name="T3">stl</text:span> нет. Как и хеш-таблица, позволяет проверять принадлежность элемента к множеству. Но фильтр не хранит ключи при добавлении, и занимает константное количество памяти. Есть возможность получить ложноположительное срабатывание (элемента в множестве нет, но структура данных сообщает, что он есть), но не ложноотрицательное. Используется как фильтр, что бы быстро отсекать почти все не существующие ключи, экономя более дорогую проверку, например читающую с диска или делающую запрос в базу данных.</text:p>
   <text:p text:style-name="P10"><text:line-break/>Есть сторонняя библиотека: <text:span text:style-name="T3">https://github.com/willf/bloom</text:span></text:p>
   <text:p text:style-name="P10"/>
   <text:p text:style-name="Code"><text:tab/>import &quot;github.com/willf/bloom&quot;</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Не так часто используется, <text:span text:style-name="T3">API</text:span> можно и подсмотреть.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P37">HyperLogLog</text:p>
   <text:p text:style-name="P10">В стандартной библиотеке <text:span text:style-name="T3">С++</text:span> такого нет. Вероятностная структура данных. С небольшой ошибкой ( ≈ 0.4% ) считает количество уникальных элементов, не храня сами ключи. Даёт огромную экономию памяти. Если стоит задача быстро посчитать количество посетителей или запросов — <text:span text:style-name="T3">HyperLogLog</text:span> подходит идеально.</text:p>
   <text:p text:style-name="P10">Самая популярная библиотека для этого сейчас <text:span text:style-name="T3">https://github.com/axiomhq/hyperloglog</text:span></text:p>
   <text:p text:style-name="P10"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>import &quot;github.com/axiomhq/hyperloglog&quot;</text:span></text:span></text:p>
   <text:p text:style-name="P37"/>
   <text:p text:style-name="P37"/>
   <text:p text:style-name="P37">Сортировки</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Аналоги <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">std::sort</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> </text:span></text:span><text:span text:style-name="T57">и </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">std::stable_sort</text:span></text:span>. С потребительской точки зрения есть только 2 принципиально разных типа: Стабильные (не меняют порядок равных элементов [[4, 0], [1, 2], [1, 1], [5, 6]] -→ [[1, 2], [1, 1], [4, 0],[5, 6]]) и не стабильные, не дающие гарантии на последовательность остальных полей. И то и другое есть в стандартной библиотеке:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>func Sort(data Interface)</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="Text_20_body">Это реализация быстрой сортировки Хоара, нестабильная. Но для участков длины &lt; 12 используется сортировка кучей, в качестве оптимизации.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>func Stable(data Interface)</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:line-break/>Внутри это сортирова слиянием, но, в целях эффективности, при достижении рекурсивным алгоритмом блоков меньше 20 элементов используется сортировка вставками. Это классические алгоритмы, работающие за <text:span text:style-name="T3">O(n log n)</text:span>. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P47">Массивы, срезы, карты.</text:p>
   <text:p text:style-name="P38">Массивы.</text:p>
   <text:p text:style-name="Text_20_body">В <text:span text:style-name="T3">Go</text:span>, и как во многих других языках, массивы фиксированы. При объявлении массива необходимо указать его размер, после чего изменить его нельзя:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>var scores [10]int </text:p>
   <text:p text:style-name="Code"><text:tab/>scores[0] = 339</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Массив выше может хранить до 10 очков, используя индексы от <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">scores[0]</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>до <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">scores[9]</text:span></text:span><text:span text:style-name="T57">.</text:span> При попытке обращения к индексам, не входящим в этот диапазон, произойдет ошибка на этапе компиляции или выполнении программы.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Мы можем инициализировать массив вместе со значениями:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75">scores := [4]int{9001, 9333, 212, 33} <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body">Можно использовать <text:span text:style-name="T6">len</text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T86"> </text:span></text:span>для получения размера массива. <text:span text:style-name="T6">range</text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T86"> </text:span></text:span>используется для итерации по нему:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>for index, value := range scores {</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>}</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="Text_20_body">Массивы эффективны в использовании, но жестко заданы. Часто мы не знаем заранее число используемых элементов. В таких случаях применяются срезы.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P39">Срезы.</text:p>
   <text:p text:style-name="Text_20_body">Срез – это легковесная структура, которая представляет собой часть массива. Есть несколько способов создать срез, и мы позже рассмотрим их подробнее. Первый способ является слегка измененным способом объявления массива:</text:p>
   <text:p text:style-name="Code"><text:tab/>scores := []int{1,4,293,4,9}</text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>В отличии от декларирования массива, срез объявлен без указания длины в квадратных скобках. Для того, чтобы понять их различия, давайте рассмотрим другой способ создания среза с использованием <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">make</text:span></text:span>:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>scores := make([]int, 10)</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Мы используем <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">make</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>вместо <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">new</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>потому, что при создании среза происходит немного больше, чем просто выделение памяти (что делает <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">new</text:span></text:span>). В частности, мы должны выделить память для массива, а также инициализировать срез. В приведенном выше примере мы создаем срез длиной 10 и вместимостью 10. Длина – это размер среза. Вместимость – это размер лежащего в его основе массива. При использовании <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">make</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>мы можем указать эти два параметра отдельно:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:tab/>scores := make([]int, 0, 10)</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Эта инструкция создает срез с длиной 0 и вместимостью 10. (Если вы были внимательны, вы могли заметить, что <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">make</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>и <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">len</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span><text:span text:style-name="Emphasis">были </text:span>перегружены. Go – это такой язык, в котором, к разочарованию некоторых, используются возможности, недоступные разработчикам).</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Для лучшего понимания взаимосвязи длины и вместимости, рассмотрим несколько примеров:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="T32"><text:tab/></text:span>func main() {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>scores := make([]int, 0, 10) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>scores[5] = 9033 </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>fmt.Println(scores)</text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Наш первый пример не работает. Почему? Потому, что срез имеет длину 0. Да, в его основе лежит массив, содержащий 10 элементов, но нам нужно явно расширить срез для получения доступа к этим элементам. Один из способов расширить срез – это <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">append</text:span></text:span>:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func main() { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>scores := make([]int, 0, 10) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>scores = append(scores, 5) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>fmt.Println(scores) // выведет [5]</text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Но такой способ изменит смысл оригинального кода. Добавление элемента к срезу длинной 0 является установкой первого значения. По определённым причинам наш нерабочий код требует установки элемента по индексу 5. Чтобы это сделать, мы должны пере-срезать наш срез:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P29"><text:tab/>func main() {</text:p>
   <text:p text:style-name="P29"><text:tab/><text:tab/>scores := make([]int, 0, 10) </text:p>
   <text:p text:style-name="P29"><text:tab/><text:tab/>scores = scores[0:6] </text:p>
   <text:p text:style-name="P29"><text:tab/><text:tab/>scores[5] = 9033 </text:p>
   <text:p text:style-name="P29"><text:tab/><text:tab/>fmt.Println(scores) </text:p>
   <text:p text:style-name="P29"><text:tab/>}</text:p>
   <text:p text:style-name="Text_20_body">Как сильно мы можем изменить размер среза? До размера его вместимости, в нашем случае это 10.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/><text:span text:style-name="T84">Вы можете подумать </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T84">на самом деле это не решает проблему фиксированной длины массивов. </text:span></text:span><text:span text:style-name="T84">Оказывается, что </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">append</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T84"> </text:span></text:span><text:span text:style-name="T84">это что-то особенное. Если основной массив заполнен, создается больший массив и все значения копируются в него (также работают динамические массивы в </text:span><text:span text:style-name="T58">PHP, Python, Ruby, JavaScript, ...</text:span><text:span text:style-name="T84">). Поэтому пример выше использует </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">append</text:span></text:span><text:span text:style-name="T84">, мы должны повторно присвоить значение, которое было возвращено </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">append</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T84"> </text:span></text:span><text:span text:style-name="T84">переменной </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">scores</text:span></text:span><text:span text:style-name="T84">: </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">append</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T84"> </text:span></text:span><text:span text:style-name="T84">может создать новое значение, если в исходном не хватает места.</text:span></text:p>
   <text:p text:style-name="P13"/>
   <text:p text:style-name="P13">Если я скажу вам, что <text:span text:style-name="T58">Go</text:span> увеличивает массивы в два раза, вы сможете догадаться, что выведет данный код?</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func main() {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>scores := make([]int, 0, 5) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>c := cap(scores) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>fmt.Println(c) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>for i := 0; i &lt; 25; i++ {</text:p>
   <text:p text:style-name="P29"><text:tab/><text:tab/><text:tab/>scores = append(scores, i) </text:p>
   <text:p text:style-name="P29"><text:tab/><text:tab/><text:tab/>// если вместимость изменена, </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/><text:tab/>// Go увеличивает массив, чтобы приспособиться к новым данным </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/><text:tab/>if cap(scores) != c { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/><text:tab/><text:tab/>c = cap(scores) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/><text:tab/><text:tab/>fmt.Println(c) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/><text:tab/>} </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>} </text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Изначальная вместимость переменной <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">scores</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>это 5. Для того, чтобы вместить 20 значений, она должна быть расширена 3 раза до вместимости в 10, 20 и наконец 40.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">И как последний пример, рассмотрим:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:tab/>func main() { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>scores := make([]int, 5) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>scores = append(scores, 9332) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>fmt.Println(scores)</text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Здесь вывод будет <text:span text:style-name="Source_20_Text"><text:span text:style-name="T65">[0, 0, 0, 0, 0, 9332]</text:span></text:span><text:span text:style-name="T65">.</text:span> Возможно, вы думали что получится <text:span text:style-name="Source_20_Text"><text:span text:style-name="T65">[9332, 0, 0, 0, 0]</text:span></text:span>? Для человека это выглядит логично. Но для компилятора, вы говорите: добавить значение к срезу, который уже содержит 5 значений.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">В итоге, есть четыре способа инициализировать срез:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P29"><text:tab/>names := []string{&quot;leto&quot;, &quot;jessica&quot;, &quot;paul&quot;} </text:p>
   <text:p text:style-name="P29"><text:tab/>checks := make([]bool, 10) </text:p>
   <text:p text:style-name="P29"><text:tab/>var names []string </text:p>
   <text:p text:style-name="P29"><text:tab/>scores := make([]int, 0, 20) </text:p>
   <text:p text:style-name="P29"/>
   <text:p text:style-name="Text_20_body">Когда какой использовать? Первый не требует особых объяснений. Его можно использовать когда вы заранее знаете значения массива.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Второй полезен когда вам нужно записывать значения по определенным индексам среза. Например:</text:p>
   <text:p text:style-name="P29"/>
   <text:p text:style-name="Code"><text:span text:style-name="T32"><text:tab/></text:span>func extractPowers(saiyans []*Saiyans) []int {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>powers := make([]int, len(saiyans)) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>for index, saiyan := range saiyans { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/><text:tab/>powers[index] = saiyan.Power </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>} </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>return powers </text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Третий случай – это пустой срез. Используется в сочетании с <text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">append</text:span></text:span>, когда число элементов заранее неизвестно.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Последний способ позволяет задать изначальную вместимость; полезен когда у вас есть общее представление о том, сколько элементов вам нужно.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Даже если вы знаете размер, можно использовать <text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">append</text:span></text:span>. Это момент по большей части зависит от ваших предпочтений:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func extractPowers(saiyans []*Saiyans) []int {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>powers := make([]int, 0, len(saiyans)) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>for _, saiyan := range saiyans {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/><text:tab/>powers = append(powers, saiyan.Power) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>} </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>return powers </text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Срезы в роли оберток массивов представляют собой мощный концепт. Во многих языках существует понятие нарезки массива. И в <text:span text:style-name="T58">JavaScript</text:span> и в <text:span text:style-name="T58">Ruby</text:span> массивы имеют метод <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">slice</text:span></text:span>. Вы можете получить срез в Ruby используя <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">[START..END] </text:span></text:span>или в <text:span text:style-name="T58">Python</text:span> с помощью <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">[START:END]</text:span></text:span>. Однако в этих языках срезы в действительности являются новыми массивами со скопированными в них значениями. Если мы возьмем <text:span text:style-name="T58">Ruby</text:span>, что выведет следующий код?</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>scores = [1,2,3,4,5] </text:p>
   <text:p text:style-name="Code"><text:tab/>slice = scores[2..4] </text:p>
   <text:p text:style-name="Code"><text:tab/>slice[0] = 999</text:p>
   <text:p text:style-name="Code"><text:tab/>puts scores</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Ответ: <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">[1, 2, 3, 4, 5]</text:span></text:span>. Потому, что <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">slice</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>совершенно новый массив с копией значений. Теперь рассмотрим эквивалент в <text:span text:style-name="T58">Go</text:span>:</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>scores := []int{1,2,3,4,5} <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>slice := scores[2:4] <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>slice[0] = 999 <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="P29"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>fmt.Println(scores)</text:span></text:span></text:p>
   <text:p text:style-name="P29"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Результат: [1, 2, 999, 4, 5].</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Это изменяет принцип кодирования. Например несколько функций принимают номер позиции в качестве параметра. В <text:span text:style-name="T3">JavaScript</text:span>, если вам нужен символ в строке (да, срезы работают со строками тоже!) идущий после пятого, вам нужно написать:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>haystack = &quot;the spice must flow&quot;; <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>console.log(haystack.indexOf(&quot; &quot;, 5)); <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body">В Go мы используем срезы:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>strings.Index(haystack[5:], &quot; &quot;) <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T65">В примере выше мы видим, что </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">[X:]</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T65"> </text:span></text:span><text:span text:style-name="T65">– это сокращение, которое означает </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T65">от </text:span></text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T58">X</text:span></text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T65"> до конца</text:span></text:span><text:span text:style-name="T65">, а</text:span><text:span text:style-name="T58"> </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">[:X]</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T65"> </text:span></text:span><text:span text:style-name="T65">это короткая запись, означающая </text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T65">от начала до </text:span></text:span><text:span text:style-name="Emphasis"><text:span text:style-name="T58">X</text:span></text:span><text:span text:style-name="T65">. В отличие от других языков, </text:span><text:span text:style-name="T58">Go</text:span><text:span text:style-name="T65"> здесь не поддерживает отрицательные индексы. Есди мы хотим получить все значения среза, кроме последнего, нам нужно выполнить:</text:span></text:p>
   <text:p text:style-name="P28"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>scores := []int{1,2,3,4,5} <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>scores = scores[:len(scores)-1] <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="Text_20_body">С помощью этого способа мы можем реализовать эффективный способ удаления значения из несортированного среза:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>func main() { <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>scores := []int{1,2,3,4,5}</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>scores = removeAtIndex(scores, 2)</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>fmt.Println(scores)</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>}</text:span></text:span></text:p>
   <text:p text:style-name="P28"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>func removeAtIndex(source []int, index int) []int { <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>lastIndex := len(source) - 1</text:span></text:span></text:p>
   <text:p text:style-name="P29"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>//меняем последнее значение и значение, </text:span></text:span></text:p>
   <text:p text:style-name="P29"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>//которое хотим удалить, местами</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>source[index], source[lastIndex] = source[lastIndex], source[index]</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>return source[:lastIndex]</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>}</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T57">Наконец, когда мы уже достаточно знаем о срезах, давайте взглянем ещё на одну часто используемую функцию </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">copy</text:span></text:span><text:span text:style-name="T57">. </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Copy </text:span></text:span><text:span text:style-name="T57">одна из тех функций, которая показывает как срезы влияют на способ кодирования. Обычно метод, который копирует значения из одного массива в другой имеет 5 параметров </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">source</text:span></text:span><text:span text:style-name="T57">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">sourceStart</text:span></text:span><text:span text:style-name="T57">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">count</text:span></text:span><text:span text:style-name="T57">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">destination</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> </text:span></text:span><text:span text:style-name="T57">и </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">destinationStart</text:span></text:span><text:span text:style-name="T57">. При работе со срезами нам нужны только два:</text:span></text:p>
   <text:p text:style-name="P28"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>import ( <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>&quot;fmt&quot;</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>&quot;math/rand&quot;</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>&quot;sort&quot;</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>)</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>func main() { <text:s/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>scores := make([]int, 100)</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>for i := 0; i &lt; 100; i++ {</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/><text:tab/>scores[i] = int(rand.Int31n(1000))</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>}</text:span></text:span></text:p>
   <text:p text:style-name="P29"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/></text:span></text:span></text:p>
   <text:p text:style-name="P29"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>sort.Ints(scores)</text:span></text:span></text:p>
   <text:p text:style-name="P28"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>worst := make([]int, 5)</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>copy(worst, scores[:5])</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/><text:tab/>fmt.Println(worst)</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"><text:tab/>}</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T75"/></text:span></text:p>
   <text:p text:style-name="Text_20_body">Немного поиграйте с кодом выше. Попробуйте различные вариации. Посмотрите, что произойдет, если вы измените копирование на <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">copy(worst[2:4]</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">scores[:5])</text:span></text:span><text:span text:style-name="T57">, или посмотрите, что будет если вы попытаетесь скопировать больше, чем </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">5 </text:span></text:span><text:span text:style-name="T57">значений в </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">worst</text:span></text:span>?</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P40">Карты</text:p>
   <text:p text:style-name="Text_20_body">Карты в <text:span text:style-name="T3">Go</text:span> – это то, что в других языках называют хеш-таблицами или словарями. Они работают так, как и ожидается: вы определяете ключ и значение, можете получать, устанавливать и удалять значения.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Карты, как и срезы, создаются с помощью функции <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">make</text:span></text:span>. Давайте взглянем на пример:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func main() { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>lookup := make(map[string]int) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>lookup[&quot;goku&quot;] = 9001 </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>power, exists := lookup[&quot;vegeta&quot;] </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>// prints 0, false </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>// 0 это значение по умолчанию для типа integer <text:tab/><text:tab/><text:tab/><text:tab/>fmt.Println(power, exists) </text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Для получения количества ключей используйте <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">len</text:span></text:span>. Для удаления значения по определенному ключу вызывайте<text:span text:style-name="T58"> </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">delete</text:span></text:span>:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>// returns 1</text:p>
   <text:p text:style-name="Code"><text:tab/>total := len(lookup) </text:p>
   <text:p text:style-name="Code"><text:tab/>// ничего не возвращает, можно указывать несуществующий ключ delete(lookup, <text:tab/>&quot;goku&quot;)</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Карты увеличиваются динамически. Однако вы можете указать второй аргумент в <text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">make</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>для установки начального значения:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:tab/>lookup := make(map[string]int, 100)</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Если вы имеете какое-то представление о том, сколько ключей вам понадобится в карте, указание начального размера может помочь с производительностью.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Когда вам нужна карта в роли поля структуры, вы указываете её так:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>type Saiyan struct {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>Name string </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>Friends map[string]*Saiyan</text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Один из способов инициализации:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>goku := &amp;Saiyan { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>Name: &quot;Goku&quot;, </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>Friends: make(map[string]*Saiyan), </text:p>
   <text:p text:style-name="Code"><text:tab/>} </text:p>
   <text:p text:style-name="Code"><text:tab/>goku.Friends[&quot;krillin&quot;] = ... <text:s/>//загрузить или создать Krillin</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Существует еще один способ объявления и инициализации значений в <text:span text:style-name="T3">Go</text:span>. Как и <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">make</text:span></text:span>, этот подход является специфичным для карт и массивов. Вы можете объявить карту как составной литерал:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>lookup := map[string] int { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>&quot;goku&quot;: 9001, </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>&quot;gohan&quot;: 2044, </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Итерация по карте производится с помощью цикла <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">for</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>в комбинации с ключевым словом <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">range</text:span></text:span>:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="T32"><text:tab/></text:span>for key, value := range lookup { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>…</text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Итерация по карте происходит не по порядку. Каждая итерация будет возвращать пару ключа и значения в случайном порядке.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P48">Интерфейсы</text:p>
   <text:p text:style-name="P16">(https://habr.com/ru/company/mailru/blog/463063/)</text:p>
   <text:p text:style-name="P42">Что такое интерфейс?</text:p>
   <text:p text:style-name="P15">Интерфейсный тип в Go — это своего рода определение. Он определяет и описывает конкретные методы, которые должны быть у какого-то другого типа.</text:p>
   <text:p text:style-name="P15"><text:line-break/>Одним из интерфейсных типов из стандартной библиотеки является интерфейс <text:span text:style-name="T3">fmt.Stringer:</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>type Stringer interface { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>String() string </text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P15">Мы говорим, что что-то удовлетворяет этому интерфейсу (или реализует этот интерфейс), если у этого «что-то» есть метод с конкретным сигнатурным строковым значение<text:span text:style-name="T57">м </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">String()</text:span></text:span><text:span text:style-name="T58">.</text:span><text:span text:style-name="T57"><text:line-break/></text:span></text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="P15"><text:soft-page-break/>Например, тип <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Book</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>удовлетворяет интерфейсу, потому что у него есть строковый метод <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">String()</text:span></text:span><text:span text:style-name="T58">:</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>type Book struct { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>Title string Author string </text:p>
   <text:p text:style-name="Code"><text:tab/>} </text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func (b Book) String() string {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>return fmt.Sprintf(&quot;Book: %s - %s&quot;, b.Title, b.Author) </text:p>
   <text:p text:style-name="Text_20_body"><text:tab/>}<text:line-break/></text:p>
   <text:p text:style-name="P15">Неважно, каким типом является <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Book</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>или что он делает. Важно лишь, что у него есть метод под названием <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">String()</text:span></text:span><text:span text:style-name="T58">,</text:span> который возвращает строковое значение. </text:p>
   <text:p text:style-name="P15"><text:line-break/>А вот другой пример. Тип <text:span text:style-name="Source_20_Text">Count </text:span>тоже удовлетворяет интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">fmt.Stringer</text:span></text:span><text:span text:style-name="T58">,</text:span> потому что у него есть метод с тем же сигнатурным строковым значением <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">String()</text:span></text:span><text:span text:style-name="T58">.</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>type Count int func (c Count) String() string { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>return strconv.Itoa(int(c)) </text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P15">Здесь важно понять, что у нас есть два разных типа <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Book</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>и <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Count</text:span></text:span>, которые действуют по-разному. Но их объединяет то, что они оба удовлетворяют интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">fmt.Stringer</text:span></text:span>.</text:p>
   <text:p text:style-name="P15"><text:line-break/>Можете посмотреть на это с другой стороны. Если вы знаете, что объект удовлетворяет интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">fmt.Stringer</text:span></text:span>, то можете считать, что у него есть метод с сигнатурным строковым значением <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">String()</text:span></text:span><text:span text:style-name="T58">,</text:span> которое вы можете вызывать.</text:p>
   <text:p text:style-name="P15"><text:line-break/>А теперь самое важное. Когда вы видите в <text:span text:style-name="T58">Go</text:span> объявление (переменной, параметра функции или поля структуры), имеющее интерфейсный тип, вы можете использовать объект любого типа, пока он удовлетворяет интерфейсу.</text:p>
   <text:p text:style-name="P15"><text:line-break/>Допустим, у нас есть функция:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="T19"><text:tab/></text:span><text:span text:style-name="T42">func WriteLog(s fmt.Stringer)</text:span><text:span text:style-name="T38"> </text:span><text:span text:style-name="T42">{ </text:span></text:p>
   <text:p text:style-name="P31"><text:tab/><text:tab/>log.Println(s.String()) </text:p>
   <text:p text:style-name="P31"><text:tab/>}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P15">Поскольку <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">WriteLog()</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>использует в объявлении параметра интерфейсный тип <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">fmt.Stringer</text:span></text:span>, мы можем передавать любой объект, удовлетворяющий интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">fmt.Stringer</text:span></text:span>. Например, можем передать типы <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Book</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>и <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Count</text:span></text:span>, которые создали ранее в методе <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">WriteLog()</text:span></text:span>, и код будет нормально работать.</text:p>
   <text:p text:style-name="P15"><text:line-break/>Кроме того, поскольку передаваемый объект удовлетворяет интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">fmt.Stringer</text:span></text:span>, мы знаем, что у него есть строковый метод <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">String()</text:span></text:span>, который может быть безопасно вызван функцией <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">WriteLog()</text:span></text:span>.</text:p>
   <text:p text:style-name="P15"/>
   <text:p text:style-name="P15"/>
   <text:p text:style-name="P15"><text:soft-page-break/>Давайте соберём всё сказанное в один пример, демонстрирующий мощь интерфейсов.</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>package main import ( &quot;fmt&quot; &quot;strconv&quot; &quot;log&quot; ) </text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>// Объявляем тип Book, который удовлетворяет интерфейсу fmt.Stringer. </text:p>
   <text:p text:style-name="Code"><text:tab/>type Book struct { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>Title string Author string </text:p>
   <text:p text:style-name="Code"><text:tab/>} </text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func (b Book) String() string { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>return fmt.Sprintf(&quot;Book: %s - %s&quot;, b.Title, b.Author) </text:p>
   <text:p text:style-name="Code"><text:tab/>} </text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>// Объявляем тип Count, который удовлетворяет интерфейсу fmt.Stringer. type <text:tab/>Count int func (c Count) String() string { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>return strconv.Itoa(int(c)) </text:p>
   <text:p text:style-name="Code"><text:tab/>} </text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P30"><text:tab/>// Объявляем функцию WriteLog(), которая берёт любой объект, </text:p>
   <text:p text:style-name="P30"><text:tab/>// удовлетворяющий интерфейсу fmt.Stringer в виде параметра. </text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func WriteLog(s fmt.Stringer) {</text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>log.Println(s.String()) </text:p>
   <text:p text:style-name="Code"><text:tab/>} </text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:tab/>func main() { </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>// Инициализируем объект Book и передаём в WriteLog(). </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>book := Book{&quot;Alice in Wonderland&quot;, &quot;Lewis Carrol&quot;} </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>WriteLog(book) </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>// Инициализируем объект Count и передаём в WriteLog(). </text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/>count := Count(3) WriteLog(count) </text:p>
   <text:p text:style-name="Code"><text:tab/>}</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="P15">Это круто. В основной функции мы создали разные типы <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Book</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>и <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Count</text:span></text:span>, но передали их одной функции <text:span text:style-name="T60">W</text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">riteLog()</text:span></text:span>. А та вызвала соответствующие функции <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">String()</text:span></text:span><text:span text:style-name="Source_20_Text"> </text:span>и записала результаты в журнал.</text:p>
   <text:p text:style-name="P15"><text:line-break/>Если выполните код, то получите подобный результат:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:tab/><text:span text:style-name="T3">2009/11/10 23:00:00 Book: Alice in Wonderland - Lewis Carrol </text:span></text:p>
   <text:p text:style-name="P11"><text:tab/>2009/11/10 23:00:00 3</text:p>
   <text:p text:style-name="P11"/>
   <text:p text:style-name="Text_20_body">Не будем на этом подробно останавливаться. Главное, что нужно запомнить: используя интерфейсный тип в объявлении функции<text:span text:style-name="T58"> </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">WriteLog()</text:span></text:span>, мы сделали функцию безразличной (или гибкой) к типу принимаемого объекта. Важно лишь то, какие у него методы.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P42">Чем полезны интерфейсы?</text:p>
   <text:p text:style-name="P4">Есть целый ряд причин, по которым вы можете <text:span text:style-name="T92">начать</text:span> использовать интерфейсы в Go. И по моему опыту, самые важные из них такие:</text:p>
   <text:list xml:id="list3490873269" text:style-name="L1">
    <text:list-item>
     <text:p text:style-name="P78">Интерфейсы помогают уменьшить дублирование, то есть количество шаблонного кода. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P78">Они облегчают использование в модульных тестах заглушек вместо реальных объектов. </text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P80"><text:soft-page-break/>Будучи архитектурным инструментом, интерфейсы помогают отвязывать части вашей кодовой базы. </text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Text_20_body"><text:line-break/>Рассмотрим подробнее эти способы использования интерфейсов.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P43">Уменьшение количесва шаблонного кода</text:p>
   <text:p text:style-name="P20">Пусть у нас есть структура <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Customer</text:span></text:span>, содержащая какие-то данные о клиенте. В одной части кода мы хотим записывать эту информацию в <text:span text:style-name="T58">bytes</text:span>.<text:span text:style-name="T58">Buffer</text:span>, а в другой части хотим записывать данные о клиенте в <text:span text:style-name="T58">os.File</text:span> на диске. Но, в обоих случаях, мы хотим сначала сериализовать структуру <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Сustomer</text:span></text:span> в <text:span text:style-name="T58">JSON</text:span>.</text:p>
   <text:p text:style-name="P20"><text:line-break/>При таком сценарии мы можем с помощью интерфейсов <text:span text:style-name="T58">Go</text:span> уменьшить количество шаблонного кода.</text:p>
   <text:p text:style-name="P20"><text:line-break/>В <text:span text:style-name="T58">Go</text:span> есть интерфейсный тип <text:span text:style-name="T58">io.Writer:</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>type Writer interface {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="7"/>Write(p []byte) (n int, err error)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">И мы можем воспользоваться тем, что <text:span text:style-name="T3">bytes.Buffer</text:span> и тип <text:span text:style-name="T3">os.File</text:span> удовлетворяют этому интерфейсу, поскольку имеют, соответственно, методы <text:span text:style-name="T3">bytes.Buffer.Write()</text:span> и <text:span text:style-name="T3">os.File.Write()</text:span>.<text:line-break/><text:line-break/>Простая реализация:</text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>package main</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>import (</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/> <text:s text:c="2"/>&quot;encoding/json&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/> <text:s text:c="2"/>&quot;io&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/> <text:s text:c="2"/>&quot;log&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/> <text:s text:c="2"/>&quot;os&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Создаём тип Customer.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>type Customer struct {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>Name string</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>Age <text:s/>int</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Реализуем метод WriteJSON, который берёт io.Writer в виде параметра.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Он отправляет структуру Сustomer в JSON, и если всё отрабатывает </text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// успешно, то вызывается соответствующий метод Write() из io.Writer.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func (c *Customer) WriteJSON(w io.Writer) error {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>js, err := json.Marshal(c)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="7"/>return err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>_, err = w.Write(js)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>return err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func main() {</text:span></text:p>
   <text:p text:style-name="Code"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>// Инициализируем структуру Customer.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>c := &amp;Customer{Name: &quot;Alice&quot;, Age: 21}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>// Затем с помощью Buffer можем вызвать метод WriteJSON</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>var buf bytes.Buffer</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>err := c.WriteJSON(buf)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/> <text:s text:c="3"/>log.Fatal(err)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>// или воспользоваться файлом.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>f, err := os.Create(&quot;/tmp/customer&quot;)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/> <text:s text:c="3"/>log.Fatal(err)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>defer f.Close()</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>err = c.WriteJSON(f)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="3"/><text:tab/><text:tab/> <text:s text:c="3"/>log.Fatal(err)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s text:c="2"/><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body">Конечно, это лишь выдуманный пример (мы можем по-разному структурировать код, чтобы добиться того же результата). Но он хорошо иллюстрирует преимущества использования интерфейсов: мы можем один раз создать метод <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Customer.WriteJSON()</text:span></text:span> и вызывать его каждый раз, когда нужно записать во что-то, удовлетворяющее интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">io.Writer</text:span></text:span>.<text:line-break/><text:line-break/>Но если вы новичок в Go, у вас возникнет пара вопросов: «Как узнать, что интерфейс <text:span text:style-name="T58">io.Writer</text:span> вообще существует? И как заранее узнать, что ему удовлетворяют <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">bytes.Buffer</text:span></text:span> и <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">os.File</text:span></text:span><text:span text:style-name="T58">?</text:span>»<text:line-break/><text:line-break/>Боюсь, простого решения тут нет. Вам просто нужно набраться опыта, познакомиться с интерфейсами и разными типами из стандартной библиотеки. В этом поможет чтение документации по этой библиотеке и просмотр чужого кода. А для быстрого ознакомления я добавил в конец статьи самые полезные типы интерфейсные типы.<text:line-break/><text:line-break/>Но даже если вы не используете интерфейсы из стандартной библиотеки, ничто не мешает вам создать и использовать собственные интерфейсные типы. Об этом мы поговорим ниже.</text:p>
   <text:p text:style-name="Subsection"/>
   <text:p text:style-name="Subsection">Модульное тестирование и заглушки</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P22">Чтобы понять, как интерфейсы помогают в модульном тестировании, давайте рассмотрим пример посложнее.</text:p>
   <text:p text:style-name="P22"><text:line-break/>Допустим, у вас есть магазин, и вы храните в PostgreSQL информацию о продажах и количестве клиентов. Вы хотите написать код, вычисляющий долю продаж (удельное количество продаж на одного клиента) за последние сутки, округлённую до двух знаков после запятой.<text:line-break/><text:line-break/>Минимальная реализация будет выглядеть так:</text:p>
   <text:p text:style-name="Code"><text:soft-page-break/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Файл: main.go</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>package main</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>import (</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>&quot;fmt&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>&quot;log&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>&quot;time&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>&quot;database/sql&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>_ &quot;github.com/lib/pq&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>)</text:span></text:p>
   <text:p text:style-name="Code"><text:tab/><text:tab/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>type ShopDB struct {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/> <text:s text:c="3"/>*sql.DB</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func (sdb *ShopDB) CountCustomers(since time.Time) (int, error) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>var count int</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>err := sdb.QueryRow(&quot;SELECT count(*) FROM customers WHERE timestamp &gt; <text:tab/><text:tab/><text:tab/>$1&quot;, since).Scan(&amp;count)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/><text:tab/>return count, err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func (sdb *ShopDB) CountSales(since time.Time) (int, error) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>var count int</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>err := sdb.QueryRow(&quot;SELECT count(*) FROM sales WHERE timestamp &gt; $1&quot;, <text:tab/><text:tab/><text:tab/>since).Scan(&amp;count)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return count, err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func main() {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>db, err := sql.Open(&quot;postgres&quot;, &quot;postgres://user:pass@localhost/db&quot;)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>log.Fatal(err)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>defer db.Close()</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>shopDB := &amp;ShopDB{db}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>sr, err := calculateSalesRate(shopDB)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>log.Fatal(err)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>fmt.Printf(sr)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func calculateSalesRate(sdb *ShopDB) (string, error) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/><text:tab/>since := time.Now().Sub(24 * time.Hour)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/><text:tab/>sales, err := sdb.CountSales(since)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/><text:tab/><text:tab/>return &quot;&quot;, err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>customers, err := sdb.CountCustomers(since)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/><text:tab/>return &quot;&quot;, err</text:span></text:p>
   <text:p text:style-name="Code"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>rate := float64(sales) / float64(customers)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return fmt.Sprintf(&quot;%.2f&quot;, rate), nil</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="P20"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Теперь мы хотим создать модульный тест для функции </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">calculateSalesRate()</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, чтобы проверить корректность вычислений.</text:span></text:span></text:p>
   <text:p text:style-name="P20"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:line-break/>Сейчас это проблематично. Нам понадобится настроить тестовый экземпляр </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">PostgreSQL</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, а также создать и удалить скрипты для наполнения базы фальшивыми данными. Придётся проделать много работы, если мы действительно хотим протестировать наши вычисления.</text:span></text:span></text:p>
   <text:p text:style-name="P20"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:line-break/>И на помощь приходят интерфейсы!</text:span></text:span></text:p>
   <text:p text:style-name="P20"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:line-break/>Мы создадим собственный интерфейсный тип, описывающий методы </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">CountSales()</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> и </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">CountCustomers()</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, на которые опирается функция </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">calculateSalesRate()</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">. Затем обновим сигнатуру </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">calculateSalesRate()</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, чтобы использовать этот интерфейсный тип в качестве параметра вместо прописанного типа </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">*ShopDB</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">.</text:span></text:span></text:p>
   <text:p text:style-name="P20"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:line-break/>Вот так:</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Файл: main.go</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>package main</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>import (</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>&quot;fmt&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>&quot;log&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>&quot;time&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>&quot;database/sql&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>_ &quot;github.com/lib/pq&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Создаём свой интерфейс ShopModel. Он прекрасно подходит для</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// интерфейса с описанием нескольких методов, и он должен описывать</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// входные параметры-типы, а также типы возвращаемых значений.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>type ShopModel interface {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>CountCustomers(time.Time) (int, error)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>CountSales(time.Time) (int, error)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Тип ShopDB удовлетворяет новому интерфейсу ShopModel, потому что</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// у него есть два необходимых метода -- CountCustomers() и CountSales().</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>type ShopDB struct {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>*sql.DB</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func (sdb *ShopDB) CountCustomers(since time.Time) (int, error) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>var count int</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>err := sdb.QueryRow(&quot;SELECT count(*) FROM customers WHERE timestamp &gt; <text:tab/><text:tab/>$1&quot;, since).Scan(&amp;count)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return count, err</text:span></text:p>
   <text:p text:style-name="Code"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func (sdb *ShopDB) CountSales(since time.Time) (int, error) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>var count int</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>err := sdb.QueryRow(&quot;SELECT count(*) FROM sales WHERE timestamp &gt; $1&quot;, <text:tab/><text:tab/>since).Scan(&amp;count)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return count, err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func main() {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>db, err := sql.Open(&quot;postgres&quot;, &quot;postgres://user:pass@localhost/db&quot;)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/><text:tab/>log.Fatal(err)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>defer db.Close()</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>shopDB := &amp;ShopDB{db}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>sr := calculateSalesRate(shopDB)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>fmt.Printf(sr)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Заменим это для использования интерфейсного типа ShopModel в виде <text:tab/>параметра</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// вместо прописанного типа *ShopDB.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func calculateSalesRate(sm ShopModel) string {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>since := time.Now().Sub(24 * time.Hour)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>sales, err := sm.CountSales(since)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T94"><text:tab/><text:tab/><text:tab/>r</text:span></text:span><text:span text:style-name="Source_20_Text">eturn &quot;&quot;, err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>customers, err := sm.CountCustomers(since)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if err != nil {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/><text:tab/>return &quot;&quot;, err</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>rate := float64(sales) / float64(customers)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return fmt.Sprintf(&quot;%.2f&quot;, rate), nil</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="P20"/>
   <text:p text:style-name="P20">После того как мы это сделали, нам будет просто создать заглушку, которая удовлетворяет интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">ShopModel</text:span></text:span>. Затем можно использовать её в ходе модульного тестирования корректной работы математической логики в функции <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">calculateSalesRate()</text:span></text:span>. </text:p>
   <text:p text:style-name="P20"/>
   <text:p text:style-name="P20">Вот так:</text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>// Файлы: main_test.go</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>package main</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>import (</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>&quot;testing&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>type MockShopDB struct{}</text:span></text:p>
   <text:p text:style-name="Code"><text:soft-page-break/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func (m *MockShopDB) CountCustomers() (int, error) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return 1000, nil</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func (m *MockShopDB) CountSales() (int, error) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return 333, nil</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func TestCalculateSalesRate(t *testing.T) {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>// Инициализируем заглушку.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/><text:tab/>m := &amp;MockShopDB{}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:s/><text:tab/><text:tab/>// Передаём заглушку в функцию calculateSalesRate().</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>sr := calculateSalesRate(m)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>//Проверяем, соответствует ли возвращаемое значение ожиданиям на <text:tab/><text:tab/>основе</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>// фальшивых входных данных.</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T94"><text:tab/><text:tab/>e</text:span></text:span><text:span text:style-name="Source_20_Text">xp := &quot;0.33&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if sr != exp {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>t.Fatalf(&quot;got %v; expected %v&quot;, sr, exp)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Теперь запускаем тест и всё прекрасно работает.</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="Subsection">Архитектура приложения</text:p>
   <text:p text:style-name="P21"><text:line-break/>В предыдущем примере мы видели, как можно использовать интерфейсы для отвязки определённых частей кода от использования конкретных типов. Например, функции <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">calculateSalesRate()</text:span></text:span> совершенно не важно, что вы ей передадите, лишь бы оно удовлетворяло интерфейсу <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">ShopModel</text:span></text:span><text:span text:style-name="T58">.</text:span></text:p>
   <text:p text:style-name="P21"><text:line-break/>Вы можете расширить эту идею и создавать в крупных проектах целые «отвязанные» уровни.<text:line-break/>Допустим, вы создаёте веб-приложение, взаимодействующее с базой данных. Если сделаете интерфейс, описывающий определённые методы для взаимодействия с БД, то сможете ссылаться на него вместо конкретного типа через HTTP-обработчики. Поскольку HTTP-обработчики ссылаются только на интерфейс, это поможет отвязать друг от друга HTTP-уровень и уровень взаимодействия с базой данных. Будет проще работать с уровнями независимо, и в будущем вы сможете заменять какие-то уровни, не влияя на работу остальных.</text:p>
   <text:p text:style-name="P21"><text:line-break/>Я написал об этом паттерне в одном из предыдущих постов, там больше подробностей и приведены практические примеры.</text:p>
   <text:p text:style-name="P21"/>
   <text:p text:style-name="Subsection">Что такое пустой интерфейс?</text:p>
   <text:p text:style-name="Text_20_body"><text:line-break/>Если вы уже какое-то время программируете на <text:span text:style-name="T58">Go,</text:span> то наверняка сталкивались с пустым интерфейсным типом <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">interface{}</text:span></text:span>. Попробую объяснить, что это такое. В начале этой статьи я написал:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P11"><text:soft-page-break/><text:tab/>Интерфейсный тип в Go — это своего рода определение. Он определяет и описывает <text:tab/>конкретные методы, которые должны быть у какого-то другого типа.</text:p>
   <text:p text:style-name="P11"/>
   <text:p text:style-name="P21">Пустой интерфейсный тип не описывает методы. У него нет правил. И поэтому любой объект удовлетворяет пустому интерфейсу.</text:p>
   <text:p text:style-name="P21"><text:line-break/>По сути, пустой интерфейсный тип <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">interface{}</text:span></text:span> — своего рода джокер. Если вы встретили его в объявлении (переменной, параметра функции или поля структуры), то можете использовать объект любого типа.</text:p>
   <text:p text:style-name="P21"><text:line-break/>Рассмотрим код:</text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>package main</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>import &quot;fmt&quot;</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func main() {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person := make(map[string]interface{}, 0)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;name&quot;] = &quot;Alice&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;age&quot;] = 21</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;height&quot;] = 167.64</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>fmt.Printf(&quot;%+v&quot;, person)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Здесь мы инициализируем </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">map&apos;у person</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, которая для ключей использует строковый тип, а для значений — пустой интерфейсный тип </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">interface{}</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">. Мы присвоили три разных типа в качестве значений </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">map&apos;ы</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> (строковое, целочисленное и </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">float32</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">), и никаких проблем. Поскольку пустому интерфейсу удовлетворяют объекты любого типа, код работает замечательно.<text:line-break/><text:line-break/>Можете запустить этот код здесь, вы увидите подобный результат:</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">map[age:21 height:167.64 name:Alice]</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body">Когда речь заходит об извлечении и использовании значений из <text:span text:style-name="T58">map’ы</text:span>, важно помнить вот о чём. Допустим, вы хотите получить значение <text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">age</text:span></text:span> и увеличить его на <text:span text:style-name="T58">1</text:span>. Если вы напишете подобный код, то он не скомпилируется:</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>package main</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>import &quot;log&quot;</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func main() {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person := make(map[string]interface{}, 0)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;name&quot;] = &quot;Alice&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;age&quot;] = 21</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;height&quot;] = 167.64</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;age&quot;] = person[&quot;age&quot;] + 1</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>fmt.Printf(&quot;%+v&quot;, person)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Вы получите сообщение об ошибке:</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">invalid operation: person[&quot;age&quot;] + 1 (mismatched types interface {} and int)</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58"/></text:span></text:p>
   <text:p text:style-name="P21"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Причина в том, что значение, хранящееся в map, принимает тип </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">interface{}</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> и теряет свой исходный, базовый тип </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">int</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">. И поскольку значение больше не целочисленное, мы не можем прибавить к нему </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">1</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">.</text:span></text:span></text:p>
   <text:p text:style-name="P21"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:line-break/>Чтобы это обойти, вам нужно сделать значение снова целочисленным, и только потом его использовать:</text:span></text:span></text:p>
   <text:p text:style-name="P21"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>package main</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>import &quot;log&quot;</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>func main() {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person := make(map[string]interface{}, 0)</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;name&quot;] = &quot;Alice&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;age&quot;] = 21</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;height&quot;] = 167.64</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>age, ok := person[&quot;age&quot;].(int)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>if !ok {</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/><text:tab/>log.Fatal(&quot;could not assert value to int&quot;)</text:span></text:p>
   <text:p text:style-name="P32"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>return</text:span></text:p>
   <text:p text:style-name="P32"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>person[&quot;age&quot;] = age + 1</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>log.Printf(&quot;%+v&quot;, person)</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Если вы запустите это, все будет работать как полагается:</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:tab/></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">2009/11/10 23:00:00 map[age:22 height:167.64 name:Alice]</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58"/></text:span></text:p>
   <text:p text:style-name="P21"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Так когда же следует использовать пустой интерфейсный тип?</text:span></text:span></text:p>
   <text:p text:style-name="P21"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"><text:line-break/>Пожалуй, не слишком часто. Если вы к этому пришли, то остановитесь и подумайте, правильно ли сейчас использовать </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">interface{}</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">. В качестве общего совета могу сказать, что будет понятнее, безопаснее и производительнее использовать конкретные типы, то есть не пустые интерфейсные типы. В приведённом выше примере лучше было определить структуру </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">Person</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> с соответствующим образом типизированными полями:</text:span></text:span></text:p>
   <text:p text:style-name="P21"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>type Person struct {</text:span></text:p>
   <text:p text:style-name="Code"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>Name <text:s text:c="2"/>string</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>Age <text:s text:c="3"/>int</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/><text:tab/>Height float32</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>}</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">С другой стороны, пустой интерфейс полезен в случаях, когда вам нужно обращаться и работать с непредсказуемыми или пользовательскими типами. Такие интерфейсы по определённым причинам используются в разных местах стандартной библиотеки, например, в функциях </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">gob.Encode</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">fmt.Print</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> и </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T58">template.Execute</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">.</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="P49"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T68">Настройка </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T73">G</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T68">olang в Linux</text:span></text:span></text:p>
   <text:p text:style-name="P23"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T72">(http://blog.sedicomm.com/2018/01/21/kak-ustanovit-golang-yazyk-programmirovaniya-go-v-linux/)</text:span></text:span></text:p>
   <text:p text:style-name="P23"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T72"/></text:span></text:p>
   <text:p text:style-name="P44"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T73">Загрузка дистрибутива Golang</text:span></text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T73">Скачиваем дистрибутив, например отсюда — </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T61">https://golang.org/dl/, </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T66">или так</text:span></text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T66"><text:tab/></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T66"><text:tab/></text:span></text:span><text:span text:style-name="Source_20_Text">$ wget -c https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T66"/></text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T66">Распаковываем в /usr/local, формируя дерево каталога Golang в /usr/local/go:</text:span></text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T66"/></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T98">$ </text:span></text:span><text:span text:style-name="Source_20_Text">tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Subsection"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Настройка среды GoLang в Linux</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Сначала настройте рабочее пространство </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">Go</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, создав каталог </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">~/go_projects</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T62">,</text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> который является корнем вашего рабочего пространства. Рабочее пространство состоит из трех каталогов, а именно:</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:list xml:id="list1713318723" text:style-name="L2">
    <text:list-header>
     <text:p text:style-name="P79"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">bin</text:span></text:span><text:span text:style-name="T62">,</text:span><text:span text:style-name="T57"> который будет содержать исполняемые двоичные файлы </text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">Go</text:span></text:span><text:span text:style-name="T57">; </text:span></text:p>
     <text:p text:style-name="P79"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">src</text:span></text:span><text:span text:style-name="T57">, который сохранит ваши исходные файлы; </text:span></text:p>
     <text:p text:style-name="P79"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">pkg</text:span></text:span><text:span text:style-name="T57">, который будет хранить объекты пакета. </text:span></text:p>
    </text:list-header>
   </text:list>
   <text:p text:style-name="P17"/>
   <text:p text:style-name="P17">Теперь создайте указанное выше дерево каталогов следующим образом:</text:p>
   <text:p text:style-name="P17"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T97"><text:tab/>$ mkdir -p ~/go_projects/{bin,src,pkg}</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T97"><text:tab/>$ cd ~/go_projects</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T97"><text:tab/>$ ls</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T97"/></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Вот и пришло время запустить </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">Go</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, как и остальные </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">Linux</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">-программы, его каталог установки должен быть сохранен как одно из значений переменной среды </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">PATH</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">.</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"/></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">Теперь добавьте </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">/usr/local/go/bin</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> в переменную среды </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">PATH</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57">, вставив строку приведенную ниже в файл </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">/etc/profile</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> для общесистемной установки или </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">$HOME/.profile</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> или </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T62">$HOME./Bash_profile</text:span></text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T57"> для пользовательской установки, </text:span></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T74">и</text:span></text:span><text:span text:style-name="T57">спользуя ваш любимый редактор, откройте соответствующий файл профиля пользователя в соответствии с вашим дистрибутивом и добавьте строку приведенную ниже, сохраните файл и выйдите из него:</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>export PATH=$PATH:/usr/local/go/bin</text:span></text:p>
   <text:p text:style-name="Code"/>
   <text:p text:style-name="Text_20_body"><text:soft-page-break/>Затем установите значения переменных среды <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">GOPATH</text:span></text:span> и <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">GOBIN</text:span></text:span><text:span text:style-name="Strong_20_Emphasis"> </text:span>в файле профиля пользователя (<text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">~/.profile</text:span></text:span> или <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">~/bash_profile</text:span></text:span>), чтобы указать на ваш каталог рабочей области.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>export GOPATH=&quot;$HOME/go_projects&quot;</text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:tab/>export GOBIN=&quot;$GOPATH/bin&quot;</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T3">Примечание</text:span></text:span><text:span text:style-name="T3">.</text:span> Если вы установили <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">GoLang</text:span></text:span> в пользовательский каталог, отличный от значения по умолчанию (<text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">/usr/local/</text:span></text:span><text:span text:style-name="Strong_20_Emphasis">)</text:span>, вы должны указать этот каталог как значение переменной <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">GOROOT</text:span></text:span>.</text:p>
   <text:p text:style-name="Text_20_body">Например, если вы установили <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">GoLang</text:span></text:span> в домашний каталог, добавьте строки приведенные ниже в файл <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">$HOME/.profile</text:span></text:span> или <text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">$HOME/.bash_profile.</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis"/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Strong_20_Emphasis"><text:tab/></text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T9">export GOROOT=$HOME/go</text:span></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T9"><text:tab/>export PATH=$PATH:$GOROOT/bin</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Source_20_Text"/></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T9">Последним шагом в этом разделе является внесение изменений в профиль пользователя в текущем сеансе </text:span></text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T7">bash</text:span></text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T9"> следующим образом:</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="Strong_20_Emphasis"/></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Strong_20_Emphasis"><text:tab/></text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T9">$ </text:span></text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T9">source ~/.bash_profile</text:span></text:span></text:span></text:p>
   <text:p text:style-name="P24"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T71">или</text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Strong_20_Emphasis"><text:tab/></text:span><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T9">$ source ~/.profile</text:span></text:span></text:span></text:p>
   <text:p text:style-name="Code"><text:span text:style-name="Strong_20_Emphasis"><text:span text:style-name="T9"/></text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
  </office:text>
 </office:body>
</office:document>